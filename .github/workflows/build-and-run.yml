name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: macos-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Homebrew (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $HOME/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"

    - name: Install dependencies with Homebrew (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake
        brew install qt@6
        brew install gmsh
        brew install googletest
        brew install mfem

    - name: Install dependencies with apt-get (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 cmake libglx-dev libgl1-mesa-dev qt6-base-dev libgtest-dev libxi-dev libxmu-dev libglu1-mesa-dev 
        # Install the latest version of Gmsh from the official website
        wget -q -O - https://gmsh.info/bin/Linux/gmsh-4.13.1-Linux64-sdk.tgz | tar -xz -C /tmp
        sudo cp /tmp/gmsh-4.13.1-Linux64-sdk/bin/gmsh /usr/local/bin/
        sudo cp -r /tmp/gmsh-4.13.1-Linux64-sdk/lib/* /usr/local/lib/
        sudo cp -r /tmp/gmsh-4.13.1-Linux64-sdk/include/* /usr/local/include/

    - name: Install Homebrew (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y build-essential curl file git
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
        echo >> /home/runner/.bashrc
        echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /home/runner/.bashrc
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        sudo apt-get install build-essential
        brew install gcc

    - name: Install MFEM with Homebrew (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew install mfem

    - name: Configure CMake (macOS only)
      if: matrix.os == 'macos-latest'
      # Configure your program with the given configuration.
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Configure CMake (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      # Configure your program with the given configuration.
      
      run: |

        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        export HOMEBREW_DIRS=$(brew --prefix $(brew list))# Add all directories in HOMEBREW_DIRS to CMAKE_PREFIX_PATH
        for dir in $HOMEBREW_DIRS; do
          export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$dir
          export CMAKE_LIBRARY_PATH=$CMAKE_LIBRARY_PATH:$dir/lib
          export CMAKE_INCLUDE_PATH=$CMAKE_INCLUDE_PATH:$dir/include
        done

        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_PREFIX_PATH=$(brew --prefix mfem)/lib/cmake/mfem -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}